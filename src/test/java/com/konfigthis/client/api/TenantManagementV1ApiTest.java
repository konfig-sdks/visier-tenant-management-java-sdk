/*
 * Visier Tenant Management APIs
 * Visier APIs for managing tenants
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AllTenantsStatusAPIDTO;
import com.konfigthis.client.model.CustomTenantPropertyDTO;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TenantDetailAPIDTO;
import com.konfigthis.client.model.TenantPreviewEntriesSummaryDTO;
import com.konfigthis.client.model.TenantPreviewEntriesSummaryListDTO;
import com.konfigthis.client.model.TenantProvisionAPIDTO;
import com.konfigthis.client.model.TenantStatusAPIDTO;
import com.konfigthis.client.model.UpdateTenantModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TenantManagementV1Api
 */
@Disabled
public class TenantManagementV1ApiTest {

    private static TenantManagementV1Api api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TenantManagementV1Api(apiClient);
    }

    /**
     * Add an analytic tenant
     *
     * Prior to processing and loading an analytic tenant&#39;s data files, you must provision, or create, that tenant.  A provisioned analytic tenant is automatically enabled. If the tenant&#39;s data is loaded after provisioning, that  data is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the applications assigned to the tenant. Visier  organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTenantTest() throws ApiException {
        String tenantCode = null;
        String tenantDisplayName = null;
        List<String> purchasedModules = null;
        Integer industryCode = null;
        List<String> embeddableDomains = null;
        List<CustomTenantPropertyDTO> customProperties = null;
        List<String> ssoInstanceIssuers = null;
        TenantProvisionAPIDTO response = api.addTenant()
                .tenantCode(tenantCode)
                .tenantDisplayName(tenantDisplayName)
                .purchasedModules(purchasedModules)
                .industryCode(industryCode)
                .embeddableDomains(embeddableDomains)
                .customProperties(customProperties)
                .ssoInstanceIssuers(ssoInstanceIssuers)
                .execute();
        // TODO: test validations
    }

    /**
     * Deprovision an analytic tenant
     *
     * Warning! Deprovisioning an analytic tenant is not reversible.  Before deprovisioning, you must disable an analytic tenant. For more information, see **&#x60;/v1/admin/tenants/:tenantId/disable&#x60;**.   This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant  may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.   If successful, the response returns the status \&quot;Deprovisioned\&quot;. This indicates that the tenant is scheduled for  deprovisioning, which may take several days to complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTenantTest() throws ApiException {
        String tenantId = null;
        TenantStatusAPIDTO response = api.deleteTenant()
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Disable an analytic tenant
     *
     * Use this API to disable an analytic tenant and remove access to Visier visualizations for the tenant&#39;s users.   You must disable an analytic tenant before deprovisioning, or removing, it from the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableTenantTest() throws ApiException {
        String tenantId = null;
        TenantStatusAPIDTO response = api.disableTenant()
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Enable an analytic tenant
     *
     * An analytic tenant is enabled when you provision or create the tenant.   Use this API to enable a tenant that you have specifically disabled; for example, if you previously did not  want that tenant to have access to Visier visualizations, but now do.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableTenantTest() throws ApiException {
        String tenantId = null;
        TenantStatusAPIDTO response = api.enableTenant()
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve an analytic tenant&#39;s details
     *
     * Use this API to retrieve all details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantTest() throws ApiException {
        String tenantId = null;
        TenantDetailAPIDTO response = api.getTenant()
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of all analytic tenants
     *
     * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the  content modules assigned to them, and all other relevant details for the tenants if requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantsTest() throws ApiException {
        Integer limit = null;
        Integer start = null;
        Boolean details = null;
        AllTenantsStatusAPIDTO response = api.getTenants()
                .limit(limit)
                .start(start)
                .details(details)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an analytic tenant
     *
     * You may need to update analytic tenants as they grow and as your organization upgrades the content available to  them. You may also encounter a scenario where an analytic tenant transitions across different industries.   To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their  industry code in the Visier system.   You can use this API to update any field on an analytic tenant, except tenantCode.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTenantTest() throws ApiException {
        String tenantDisplayName = null;
        Integer industryCode = null;
        List<String> purchasedModules = null;
        List<String> embeddableDomains = null;
        Map<String, String> customProperties = null;
        List<String> ssoInstanceIssuers = null;
        String tenantId = null;
        TenantProvisionAPIDTO response = api.updateTenant()
                .tenantDisplayName(tenantDisplayName)
                .industryCode(industryCode)
                .purchasedModules(purchasedModules)
                .embeddableDomains(embeddableDomains)
                .customProperties(customProperties)
                .ssoInstanceIssuers(ssoInstanceIssuers)
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate an analytic tenant&#39;s metric values
     *
     * Use this API to retrieve the metric values for an individual analytic tenant. The metric values included in the  response are the tenant&#39;s configured summary metrics. Administrators can configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTenantTest() throws ApiException {
        String tenantId = null;
        TenantPreviewEntriesSummaryDTO response = api.validateTenant()
                .tenantId(tenantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate metric values for all analytic tenants
     *
     * As you onboard more analytic tenants, you can validate the data visible to your users to ensure it matches the  source systems from which it was exported and that it matches what your expectations are for this data.   The metric values included in the response are the tenant&#39;s configured summary metrics. Administrators can  configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTenantsTest() throws ApiException {
        Integer limit = null;
        Integer start = null;
        TenantPreviewEntriesSummaryListDTO response = api.validateTenants()
                .limit(limit)
                .start(start)
                .execute();
        // TODO: test validations
    }

}
