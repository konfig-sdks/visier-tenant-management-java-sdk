/*
 * Visier Tenant Management APIs
 * Visier APIs for managing tenants
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BusinessLocationDTO;
import com.konfigthis.client.model.CustomPropertyDTO;
import com.konfigthis.client.model.HomeAnalysisByUserGroupDTO;
import com.konfigthis.client.model.MaskMessage;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TenantManagementAPIGetResponseDTO;
import com.konfigthis.client.model.TenantManagementAPIListResponseDTO;
import com.konfigthis.client.model.TenantManagementAPIUpdateRequestDTO;
import com.konfigthis.client.model.TenantManagementAPIUpdateResponseDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TenantManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TenantManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TenantManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTenantCall(TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantManagementAPIUpdateRequestDTO;

        // create path and map variables
        String localVarPath = "/v2/admin/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTenantValidateBeforeCall(TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantManagementAPIUpdateRequestDTO' is set
        if (tenantManagementAPIUpdateRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'tenantManagementAPIUpdateRequestDTO' when calling createTenant(Async)");
        }

        return createTenantCall(tenantManagementAPIUpdateRequestDTO, _callback);

    }


    private ApiResponse<TenantManagementAPIUpdateResponseDTO> createTenantWithHttpInfo(TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createTenantValidateBeforeCall(tenantManagementAPIUpdateRequestDTO, null);
        Type localVarReturnType = new TypeToken<TenantManagementAPIUpdateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTenantAsync(TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO, final ApiCallback<TenantManagementAPIUpdateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTenantValidateBeforeCall(tenantManagementAPIUpdateRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<TenantManagementAPIUpdateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTenantRequestBuilder {
        private String tenantCode;
        private String tenantDisplayName;
        private String tenantShortName;
        private String vanityUrlName;
        private Integer industryCode;
        private BusinessLocationDTO primaryBusinessLocation;
        private List<String> purchasedModules;
        private List<String> embeddableDomains;
        private List<CustomPropertyDTO> customProperties;
        private List<String> ssoInstanceIssuers;
        private String homeAnalysisId;
        private List<HomeAnalysisByUserGroupDTO> homeAnalysisByUserGroup;
        private String updateAction;
        private Boolean enabled;
        private String clickThroughLink;

        private CreateTenantRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode A unique identifier for the newly created analytic tenant. Required if creating new tenants. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set tenantDisplayName
         * @param tenantDisplayName A new display name to assign to the analytic tenant. Required if creating new tenants. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder tenantDisplayName(String tenantDisplayName) {
            this.tenantDisplayName = tenantDisplayName;
            return this;
        }
        
        /**
         * Set tenantShortName
         * @param tenantShortName A new short name to assign to the tenant. Required for Enterprise tenants (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder tenantShortName(String tenantShortName) {
            this.tenantShortName = tenantShortName;
            return this;
        }
        
        /**
         * Set vanityUrlName
         * @param vanityUrlName A new vanity name to assign to the tenant. Required for Enterprise tenants (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder vanityUrlName(String vanityUrlName) {
            this.vanityUrlName = vanityUrlName;
            return this;
        }
        
        /**
         * Set industryCode
         * @param industryCode The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 000000.  For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000. Required if creating new tenants. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder industryCode(Integer industryCode) {
            this.industryCode = industryCode;
            return this;
        }
        
        /**
         * Set primaryBusinessLocation
         * @param primaryBusinessLocation The primary location of operations or where business is performed. This field is optional. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder primaryBusinessLocation(BusinessLocationDTO primaryBusinessLocation) {
            this.primaryBusinessLocation = primaryBusinessLocation;
            return this;
        }
        
        /**
         * Set purchasedModules
         * @param purchasedModules A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant. Required if creating new tenants. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder purchasedModules(List<String> purchasedModules) {
            this.purchasedModules = purchasedModules;
            return this;
        }
        
        /**
         * Set embeddableDomains
         * @param embeddableDomains A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If domains at the administrating tenant level match the domains at the analytic tenant level, you do not need to include a domain for each analytic tenant. This is optional. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder embeddableDomains(List<String> embeddableDomains) {
            this.embeddableDomains = embeddableDomains;
            return this;
        }
        
        /**
         * Set customProperties
         * @param customProperties A list of objects that represent different customizable properties for the analytic tenant. This is optional. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder customProperties(List<CustomPropertyDTO> customProperties) {
            this.customProperties = customProperties;
            return this;
        }
        
        /**
         * Set ssoInstanceIssuers
         * @param ssoInstanceIssuers A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant. This is optional. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder ssoInstanceIssuers(List<String> ssoInstanceIssuers) {
            this.ssoInstanceIssuers = ssoInstanceIssuers;
            return this;
        }
        
        /**
         * Set homeAnalysisId
         * @param homeAnalysisId The unique ID of the analysis to display for this tenant when a user logs in. This is optional. Causes the API request to take longer because it must publish a project to production.   Retrieve the ID by opening an analysis in the production version of a tenant and copying the string after the last forward slash (/) in the URL. For example: https://jupiter.visier.com/hr/prod/appcontainer?previewId&#x3D;-eZPm8xvo3SUMpD4Q5pdE-6mCj9CQ9K699XgqRGwtOxagH5x2IzDFawlWn3hYqFEfU7nP0YK9ASEzmrNfAihGg..&amp;previewType&#x3D;Production#/analytics/myanalyses/8a4c1d4f-eb61-4da0-9e5b-55bef757c30e   The &#x60;homeAnalysisID&#x60; is 8a4c1d4f-eb61-4da0-9e5b-55bef757c30e. Alternatively, retrieve the ID by copying the &#x60;contentId&#x60; found by following the &#x60;Embed a visualization&#x60; documentation. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder homeAnalysisId(String homeAnalysisId) {
            this.homeAnalysisId = homeAnalysisId;
            return this;
        }
        
        /**
         * Set homeAnalysisByUserGroup
         * @param homeAnalysisByUserGroup A list of objects representing the analysis to display to specific user groups when users log in. This is optional. Causes the API request to take longer because it must publish a project to production. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder homeAnalysisByUserGroup(List<HomeAnalysisByUserGroupDTO> homeAnalysisByUserGroup) {
            this.homeAnalysisByUserGroup = homeAnalysisByUserGroup;
            return this;
        }
        
        /**
         * Set updateAction
         * @param updateAction Specifies the way you want to update values. Default is MERGE.  Valid values:  - &#x60;MERGE&#x60;: Combine the existing values with the new values.  - &#x60;REPLACE&#x60;: Remove existing values and let the new values take their place. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder updateAction(String updateAction) {
            this.updateAction = updateAction;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled If true, the tenant is enabled. Enabled tenants have access to Visier visualizations. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set clickThroughLink
         * @param clickThroughLink A custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content. This is optional. Causes the API request to take longer because it must publish a project to production. (optional)
         * @return CreateTenantRequestBuilder
         */
        public CreateTenantRequestBuilder clickThroughLink(String clickThroughLink) {
            this.clickThroughLink = clickThroughLink;
            return this;
        }
        
        /**
         * Build call for createTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = buildBodyParams();
            return createTenantCall(tenantManagementAPIUpdateRequestDTO, _callback);
        }

        private TenantManagementAPIUpdateRequestDTO buildBodyParams() {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = new TenantManagementAPIUpdateRequestDTO();
            tenantManagementAPIUpdateRequestDTO.tenantCode(this.tenantCode);
            tenantManagementAPIUpdateRequestDTO.tenantDisplayName(this.tenantDisplayName);
            tenantManagementAPIUpdateRequestDTO.tenantShortName(this.tenantShortName);
            tenantManagementAPIUpdateRequestDTO.vanityUrlName(this.vanityUrlName);
            tenantManagementAPIUpdateRequestDTO.industryCode(this.industryCode);
            tenantManagementAPIUpdateRequestDTO.primaryBusinessLocation(this.primaryBusinessLocation);
            tenantManagementAPIUpdateRequestDTO.purchasedModules(this.purchasedModules);
            tenantManagementAPIUpdateRequestDTO.embeddableDomains(this.embeddableDomains);
            tenantManagementAPIUpdateRequestDTO.customProperties(this.customProperties);
            tenantManagementAPIUpdateRequestDTO.ssoInstanceIssuers(this.ssoInstanceIssuers);
            tenantManagementAPIUpdateRequestDTO.homeAnalysisId(this.homeAnalysisId);
            tenantManagementAPIUpdateRequestDTO.homeAnalysisByUserGroup(this.homeAnalysisByUserGroup);
            if (this.updateAction != null)
            tenantManagementAPIUpdateRequestDTO.updateAction(TenantManagementAPIUpdateRequestDTO.UpdateActionEnum.fromValue(this.updateAction));
            tenantManagementAPIUpdateRequestDTO.enabled(this.enabled);
            tenantManagementAPIUpdateRequestDTO.clickThroughLink(this.clickThroughLink);
            return tenantManagementAPIUpdateRequestDTO;
        }

        /**
         * Execute createTenant request
         * @return TenantManagementAPIUpdateResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantManagementAPIUpdateResponseDTO execute() throws ApiException {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = buildBodyParams();
            ApiResponse<TenantManagementAPIUpdateResponseDTO> localVarResp = createTenantWithHttpInfo(tenantManagementAPIUpdateRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantManagementAPIUpdateResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantManagementAPIUpdateResponseDTO> executeWithHttpInfo() throws ApiException {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = buildBodyParams();
            return createTenantWithHttpInfo(tenantManagementAPIUpdateRequestDTO);
        }

        /**
         * Execute createTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantManagementAPIUpdateResponseDTO> _callback) throws ApiException {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = buildBodyParams();
            return createTenantAsync(tenantManagementAPIUpdateRequestDTO, _callback);
        }
    }

    /**
     * Add an analytic tenant
     * Prior to processing and loading an analytic tenant&#39;s data files, you must provision, or create, that tenant. A  provisioned analytic tenant is automatically enabled. If the tenant&#39;s data is loaded after provisioning, that data  is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the  applications assigned to the tenant. Visier organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
     * @param tenantManagementAPIUpdateRequestDTO  (required)
     * @return CreateTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CreateTenantRequestBuilder createTenant() throws IllegalArgumentException {
        return new CreateTenantRequestBuilder();
    }
    private okhttp3.Call listTenantsCall(MaskMessage maskMessage, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = maskMessage;

        // create path and map variables
        String localVarPath = "/v2/admin/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTenantsValidateBeforeCall(MaskMessage maskMessage, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'maskMessage' is set
        if (maskMessage == null) {
            throw new ApiException("Missing the required parameter 'maskMessage' when calling listTenants(Async)");
        }

        return listTenantsCall(maskMessage, limit, start, _callback);

    }


    private ApiResponse<TenantManagementAPIListResponseDTO> listTenantsWithHttpInfo(MaskMessage maskMessage, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = listTenantsValidateBeforeCall(maskMessage, limit, start, null);
        Type localVarReturnType = new TypeToken<TenantManagementAPIListResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTenantsAsync(MaskMessage maskMessage, Integer limit, Integer start, final ApiCallback<TenantManagementAPIListResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTenantsValidateBeforeCall(maskMessage, limit, start, _callback);
        Type localVarReturnType = new TypeToken<TenantManagementAPIListResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTenantsRequestBuilder {
        private String mask;
        private Integer limit;
        private Integer start;

        private ListTenantsRequestBuilder() {
        }

        /**
         * Set mask
         * @param mask A comma separated list of strings that specifies which fields to include in the response. (optional)
         * @return ListTenantsRequestBuilder
         */
        public ListTenantsRequestBuilder mask(String mask) {
            this.mask = mask;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of tenants to return. Default is 400. (optional)
         * @return ListTenantsRequestBuilder
         */
        public ListTenantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The starting index of the first tenant to return. Default is 0. (optional)
         * @return ListTenantsRequestBuilder
         */
        public ListTenantsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for listTenants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MaskMessage maskMessage = buildBodyParams();
            return listTenantsCall(maskMessage, limit, start, _callback);
        }

        private MaskMessage buildBodyParams() {
            MaskMessage maskMessage = new MaskMessage();
            maskMessage.mask(this.mask);
            return maskMessage;
        }

        /**
         * Execute listTenants request
         * @return TenantManagementAPIListResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantManagementAPIListResponseDTO execute() throws ApiException {
            MaskMessage maskMessage = buildBodyParams();
            ApiResponse<TenantManagementAPIListResponseDTO> localVarResp = listTenantsWithHttpInfo(maskMessage, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTenants request with HTTP info returned
         * @return ApiResponse&lt;TenantManagementAPIListResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantManagementAPIListResponseDTO> executeWithHttpInfo() throws ApiException {
            MaskMessage maskMessage = buildBodyParams();
            return listTenantsWithHttpInfo(maskMessage, limit, start);
        }

        /**
         * Execute listTenants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantManagementAPIListResponseDTO> _callback) throws ApiException {
            MaskMessage maskMessage = buildBodyParams();
            return listTenantsAsync(maskMessage, limit, start, _callback);
        }
    }

    /**
     * Retrieve a list of all analytic tenants
     * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the content  modules assigned to them, and all other relevant details for the tenants if requested.
     * @param maskMessage  (required)
     * @return ListTenantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ListTenantsRequestBuilder listTenants() throws IllegalArgumentException {
        return new ListTenantsRequestBuilder();
    }
    private okhttp3.Call tenantInfoCall(String tenantId, MaskMessage maskMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = maskMessage;

        // create path and map variables
        String localVarPath = "/v2/admin/tenants/{tenantId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantInfoValidateBeforeCall(String tenantId, MaskMessage maskMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling tenantInfo(Async)");
        }

        // verify the required parameter 'maskMessage' is set
        if (maskMessage == null) {
            throw new ApiException("Missing the required parameter 'maskMessage' when calling tenantInfo(Async)");
        }

        return tenantInfoCall(tenantId, maskMessage, _callback);

    }


    private ApiResponse<TenantManagementAPIGetResponseDTO> tenantInfoWithHttpInfo(String tenantId, MaskMessage maskMessage) throws ApiException {
        okhttp3.Call localVarCall = tenantInfoValidateBeforeCall(tenantId, maskMessage, null);
        Type localVarReturnType = new TypeToken<TenantManagementAPIGetResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tenantInfoAsync(String tenantId, MaskMessage maskMessage, final ApiCallback<TenantManagementAPIGetResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantInfoValidateBeforeCall(tenantId, maskMessage, _callback);
        Type localVarReturnType = new TypeToken<TenantManagementAPIGetResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TenantInfoRequestBuilder {
        private final String tenantId;
        private String mask;

        private TenantInfoRequestBuilder(String tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set mask
         * @param mask A comma separated list of strings that specifies which fields to include in the response. (optional)
         * @return TenantInfoRequestBuilder
         */
        public TenantInfoRequestBuilder mask(String mask) {
            this.mask = mask;
            return this;
        }
        
        /**
         * Build call for tenantInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MaskMessage maskMessage = buildBodyParams();
            return tenantInfoCall(tenantId, maskMessage, _callback);
        }

        private MaskMessage buildBodyParams() {
            MaskMessage maskMessage = new MaskMessage();
            maskMessage.mask(this.mask);
            return maskMessage;
        }

        /**
         * Execute tenantInfo request
         * @return TenantManagementAPIGetResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantManagementAPIGetResponseDTO execute() throws ApiException {
            MaskMessage maskMessage = buildBodyParams();
            ApiResponse<TenantManagementAPIGetResponseDTO> localVarResp = tenantInfoWithHttpInfo(tenantId, maskMessage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute tenantInfo request with HTTP info returned
         * @return ApiResponse&lt;TenantManagementAPIGetResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantManagementAPIGetResponseDTO> executeWithHttpInfo() throws ApiException {
            MaskMessage maskMessage = buildBodyParams();
            return tenantInfoWithHttpInfo(tenantId, maskMessage);
        }

        /**
         * Execute tenantInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantManagementAPIGetResponseDTO> _callback) throws ApiException {
            MaskMessage maskMessage = buildBodyParams();
            return tenantInfoAsync(tenantId, maskMessage, _callback);
        }
    }

    /**
     * Retrieve an analytic tenant&#39;s details
     * Use this API to retrieve the details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
     * @param tenantId The ID of the tenant to retrieve. (required)
     * @param maskMessage  (required)
     * @return TenantInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public TenantInfoRequestBuilder tenantInfo(String tenantId) throws IllegalArgumentException {
        if (tenantId == null) throw new IllegalArgumentException("\"tenantId\" is required but got null");
            

        return new TenantInfoRequestBuilder(tenantId);
    }
    private okhttp3.Call updateTenantCall(TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantManagementAPIUpdateRequestDTO;

        // create path and map variables
        String localVarPath = "/v2/admin/tenants/:tenantId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTenantValidateBeforeCall(TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantManagementAPIUpdateRequestDTO' is set
        if (tenantManagementAPIUpdateRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'tenantManagementAPIUpdateRequestDTO' when calling updateTenant(Async)");
        }

        return updateTenantCall(tenantManagementAPIUpdateRequestDTO, _callback);

    }


    private ApiResponse<TenantManagementAPIUpdateResponseDTO> updateTenantWithHttpInfo(TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = updateTenantValidateBeforeCall(tenantManagementAPIUpdateRequestDTO, null);
        Type localVarReturnType = new TypeToken<TenantManagementAPIUpdateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTenantAsync(TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO, final ApiCallback<TenantManagementAPIUpdateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTenantValidateBeforeCall(tenantManagementAPIUpdateRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<TenantManagementAPIUpdateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTenantRequestBuilder {
        private String tenantCode;
        private String tenantDisplayName;
        private String tenantShortName;
        private String vanityUrlName;
        private Integer industryCode;
        private BusinessLocationDTO primaryBusinessLocation;
        private List<String> purchasedModules;
        private List<String> embeddableDomains;
        private List<CustomPropertyDTO> customProperties;
        private List<String> ssoInstanceIssuers;
        private String homeAnalysisId;
        private List<HomeAnalysisByUserGroupDTO> homeAnalysisByUserGroup;
        private String updateAction;
        private Boolean enabled;
        private String clickThroughLink;

        private UpdateTenantRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode A unique identifier for the newly created analytic tenant. Required if creating new tenants. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set tenantDisplayName
         * @param tenantDisplayName A new display name to assign to the analytic tenant. Required if creating new tenants. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder tenantDisplayName(String tenantDisplayName) {
            this.tenantDisplayName = tenantDisplayName;
            return this;
        }
        
        /**
         * Set tenantShortName
         * @param tenantShortName A new short name to assign to the tenant. Required for Enterprise tenants (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder tenantShortName(String tenantShortName) {
            this.tenantShortName = tenantShortName;
            return this;
        }
        
        /**
         * Set vanityUrlName
         * @param vanityUrlName A new vanity name to assign to the tenant. Required for Enterprise tenants (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder vanityUrlName(String vanityUrlName) {
            this.vanityUrlName = vanityUrlName;
            return this;
        }
        
        /**
         * Set industryCode
         * @param industryCode The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 000000.  For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000. Required if creating new tenants. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder industryCode(Integer industryCode) {
            this.industryCode = industryCode;
            return this;
        }
        
        /**
         * Set primaryBusinessLocation
         * @param primaryBusinessLocation The primary location of operations or where business is performed. This field is optional. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder primaryBusinessLocation(BusinessLocationDTO primaryBusinessLocation) {
            this.primaryBusinessLocation = primaryBusinessLocation;
            return this;
        }
        
        /**
         * Set purchasedModules
         * @param purchasedModules A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant. Required if creating new tenants. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder purchasedModules(List<String> purchasedModules) {
            this.purchasedModules = purchasedModules;
            return this;
        }
        
        /**
         * Set embeddableDomains
         * @param embeddableDomains A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If domains at the administrating tenant level match the domains at the analytic tenant level, you do not need to include a domain for each analytic tenant. This is optional. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder embeddableDomains(List<String> embeddableDomains) {
            this.embeddableDomains = embeddableDomains;
            return this;
        }
        
        /**
         * Set customProperties
         * @param customProperties A list of objects that represent different customizable properties for the analytic tenant. This is optional. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder customProperties(List<CustomPropertyDTO> customProperties) {
            this.customProperties = customProperties;
            return this;
        }
        
        /**
         * Set ssoInstanceIssuers
         * @param ssoInstanceIssuers A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant. This is optional. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder ssoInstanceIssuers(List<String> ssoInstanceIssuers) {
            this.ssoInstanceIssuers = ssoInstanceIssuers;
            return this;
        }
        
        /**
         * Set homeAnalysisId
         * @param homeAnalysisId The unique ID of the analysis to display for this tenant when a user logs in. This is optional. Causes the API request to take longer because it must publish a project to production.   Retrieve the ID by opening an analysis in the production version of a tenant and copying the string after the last forward slash (/) in the URL. For example: https://jupiter.visier.com/hr/prod/appcontainer?previewId&#x3D;-eZPm8xvo3SUMpD4Q5pdE-6mCj9CQ9K699XgqRGwtOxagH5x2IzDFawlWn3hYqFEfU7nP0YK9ASEzmrNfAihGg..&amp;previewType&#x3D;Production#/analytics/myanalyses/8a4c1d4f-eb61-4da0-9e5b-55bef757c30e   The &#x60;homeAnalysisID&#x60; is 8a4c1d4f-eb61-4da0-9e5b-55bef757c30e. Alternatively, retrieve the ID by copying the &#x60;contentId&#x60; found by following the &#x60;Embed a visualization&#x60; documentation. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder homeAnalysisId(String homeAnalysisId) {
            this.homeAnalysisId = homeAnalysisId;
            return this;
        }
        
        /**
         * Set homeAnalysisByUserGroup
         * @param homeAnalysisByUserGroup A list of objects representing the analysis to display to specific user groups when users log in. This is optional. Causes the API request to take longer because it must publish a project to production. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder homeAnalysisByUserGroup(List<HomeAnalysisByUserGroupDTO> homeAnalysisByUserGroup) {
            this.homeAnalysisByUserGroup = homeAnalysisByUserGroup;
            return this;
        }
        
        /**
         * Set updateAction
         * @param updateAction Specifies the way you want to update values. Default is MERGE.  Valid values:  - &#x60;MERGE&#x60;: Combine the existing values with the new values.  - &#x60;REPLACE&#x60;: Remove existing values and let the new values take their place. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder updateAction(String updateAction) {
            this.updateAction = updateAction;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled If true, the tenant is enabled. Enabled tenants have access to Visier visualizations. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set clickThroughLink
         * @param clickThroughLink A custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content. This is optional. Causes the API request to take longer because it must publish a project to production. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder clickThroughLink(String clickThroughLink) {
            this.clickThroughLink = clickThroughLink;
            return this;
        }
        
        /**
         * Build call for updateTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = buildBodyParams();
            return updateTenantCall(tenantManagementAPIUpdateRequestDTO, _callback);
        }

        private TenantManagementAPIUpdateRequestDTO buildBodyParams() {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = new TenantManagementAPIUpdateRequestDTO();
            tenantManagementAPIUpdateRequestDTO.tenantCode(this.tenantCode);
            tenantManagementAPIUpdateRequestDTO.tenantDisplayName(this.tenantDisplayName);
            tenantManagementAPIUpdateRequestDTO.tenantShortName(this.tenantShortName);
            tenantManagementAPIUpdateRequestDTO.vanityUrlName(this.vanityUrlName);
            tenantManagementAPIUpdateRequestDTO.industryCode(this.industryCode);
            tenantManagementAPIUpdateRequestDTO.primaryBusinessLocation(this.primaryBusinessLocation);
            tenantManagementAPIUpdateRequestDTO.purchasedModules(this.purchasedModules);
            tenantManagementAPIUpdateRequestDTO.embeddableDomains(this.embeddableDomains);
            tenantManagementAPIUpdateRequestDTO.customProperties(this.customProperties);
            tenantManagementAPIUpdateRequestDTO.ssoInstanceIssuers(this.ssoInstanceIssuers);
            tenantManagementAPIUpdateRequestDTO.homeAnalysisId(this.homeAnalysisId);
            tenantManagementAPIUpdateRequestDTO.homeAnalysisByUserGroup(this.homeAnalysisByUserGroup);
            if (this.updateAction != null)
            tenantManagementAPIUpdateRequestDTO.updateAction(TenantManagementAPIUpdateRequestDTO.UpdateActionEnum.fromValue(this.updateAction));
            tenantManagementAPIUpdateRequestDTO.enabled(this.enabled);
            tenantManagementAPIUpdateRequestDTO.clickThroughLink(this.clickThroughLink);
            return tenantManagementAPIUpdateRequestDTO;
        }

        /**
         * Execute updateTenant request
         * @return TenantManagementAPIUpdateResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantManagementAPIUpdateResponseDTO execute() throws ApiException {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = buildBodyParams();
            ApiResponse<TenantManagementAPIUpdateResponseDTO> localVarResp = updateTenantWithHttpInfo(tenantManagementAPIUpdateRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantManagementAPIUpdateResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantManagementAPIUpdateResponseDTO> executeWithHttpInfo() throws ApiException {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = buildBodyParams();
            return updateTenantWithHttpInfo(tenantManagementAPIUpdateRequestDTO);
        }

        /**
         * Execute updateTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantManagementAPIUpdateResponseDTO> _callback) throws ApiException {
            TenantManagementAPIUpdateRequestDTO tenantManagementAPIUpdateRequestDTO = buildBodyParams();
            return updateTenantAsync(tenantManagementAPIUpdateRequestDTO, _callback);
        }
    }

    /**
     * Update an analytic tenant
     * You may need to update analytic tenants as they grow and as your organization upgrades the content available to them.  You may also encounter a scenario where an analytic tenant transitions across different industries. To make updates  to your tenants, use this API.   * To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their industry code in the Visier system.  * To programmatically assign the Home analysis that analytic tenants see at login, use this API to set the default Home analysis for a tenant and specific user groups of that tenant.   You can use this API to update any field on an analytic tenant, except tenantCode.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
     * @param tenantManagementAPIUpdateRequestDTO  (required)
     * @return UpdateTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTenantRequestBuilder updateTenant() throws IllegalArgumentException {
        return new UpdateTenantRequestBuilder();
    }
}
