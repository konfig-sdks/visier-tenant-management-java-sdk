/*
 * Visier Tenant Management APIs
 * Visier APIs for managing tenants
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AllTenantsStatusAPIDTO;
import com.konfigthis.client.model.CustomTenantPropertyDTO;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TenantDetailAPIDTO;
import com.konfigthis.client.model.TenantPreviewEntriesSummaryDTO;
import com.konfigthis.client.model.TenantPreviewEntriesSummaryListDTO;
import com.konfigthis.client.model.TenantProvisionAPIDTO;
import com.konfigthis.client.model.TenantStatusAPIDTO;
import com.konfigthis.client.model.UpdateTenantModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TenantManagementV1ApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TenantManagementV1ApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TenantManagementV1ApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTenantCall(TenantProvisionAPIDTO tenantProvisionAPIDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantProvisionAPIDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTenantValidateBeforeCall(TenantProvisionAPIDTO tenantProvisionAPIDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantProvisionAPIDTO' is set
        if (tenantProvisionAPIDTO == null) {
            throw new ApiException("Missing the required parameter 'tenantProvisionAPIDTO' when calling addTenant(Async)");
        }

        return addTenantCall(tenantProvisionAPIDTO, _callback);

    }


    private ApiResponse<TenantProvisionAPIDTO> addTenantWithHttpInfo(TenantProvisionAPIDTO tenantProvisionAPIDTO) throws ApiException {
        okhttp3.Call localVarCall = addTenantValidateBeforeCall(tenantProvisionAPIDTO, null);
        Type localVarReturnType = new TypeToken<TenantProvisionAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTenantAsync(TenantProvisionAPIDTO tenantProvisionAPIDTO, final ApiCallback<TenantProvisionAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTenantValidateBeforeCall(tenantProvisionAPIDTO, _callback);
        Type localVarReturnType = new TypeToken<TenantProvisionAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTenantRequestBuilder {
        private String tenantCode;
        private String tenantDisplayName;
        private List<String> purchasedModules;
        private Integer industryCode;
        private List<String> embeddableDomains;
        private List<CustomTenantPropertyDTO> customProperties;
        private List<String> ssoInstanceIssuers;

        private AddTenantRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode The unique identifier of the analytic tenant. (optional)
         * @return AddTenantRequestBuilder
         */
        public AddTenantRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set tenantDisplayName
         * @param tenantDisplayName The display name that is assigned to the analytic tenant. (optional)
         * @return AddTenantRequestBuilder
         */
        public AddTenantRequestBuilder tenantDisplayName(String tenantDisplayName) {
            this.tenantDisplayName = tenantDisplayName;
            return this;
        }
        
        /**
         * Set purchasedModules
         * @param purchasedModules A comma-separated list of strings that represent the Visier modules assigned to the analytic tenant. (optional)
         * @return AddTenantRequestBuilder
         */
        public AddTenantRequestBuilder purchasedModules(List<String> purchasedModules) {
            this.purchasedModules = purchasedModules;
            return this;
        }
        
        /**
         * Set industryCode
         * @param industryCode The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 000000.   For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000. (optional)
         * @return AddTenantRequestBuilder
         */
        public AddTenantRequestBuilder industryCode(Integer industryCode) {
            this.industryCode = industryCode;
            return this;
        }
        
        /**
         * Set embeddableDomains
         * @param embeddableDomains A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If  domains at the administrating tenant level match the domains at the analytic tenant level, you do not need  to include a domain for each analytic tenant. (optional)
         * @return AddTenantRequestBuilder
         */
        public AddTenantRequestBuilder embeddableDomains(List<String> embeddableDomains) {
            this.embeddableDomains = embeddableDomains;
            return this;
        }
        
        /**
         * Set customProperties
         * @param customProperties A set of key-value pairs that represent different customizable properties for the analytic tenant. (optional)
         * @return AddTenantRequestBuilder
         */
        public AddTenantRequestBuilder customProperties(List<CustomTenantPropertyDTO> customProperties) {
            this.customProperties = customProperties;
            return this;
        }
        
        /**
         * Set ssoInstanceIssuers
         * @param ssoInstanceIssuers A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant. (optional)
         * @return AddTenantRequestBuilder
         */
        public AddTenantRequestBuilder ssoInstanceIssuers(List<String> ssoInstanceIssuers) {
            this.ssoInstanceIssuers = ssoInstanceIssuers;
            return this;
        }
        
        /**
         * Build call for addTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TenantProvisionAPIDTO tenantProvisionAPIDTO = buildBodyParams();
            return addTenantCall(tenantProvisionAPIDTO, _callback);
        }

        private TenantProvisionAPIDTO buildBodyParams() {
            TenantProvisionAPIDTO tenantProvisionAPIDTO = new TenantProvisionAPIDTO();
            tenantProvisionAPIDTO.tenantCode(this.tenantCode);
            tenantProvisionAPIDTO.tenantDisplayName(this.tenantDisplayName);
            tenantProvisionAPIDTO.purchasedModules(this.purchasedModules);
            tenantProvisionAPIDTO.industryCode(this.industryCode);
            tenantProvisionAPIDTO.embeddableDomains(this.embeddableDomains);
            tenantProvisionAPIDTO.customProperties(this.customProperties);
            tenantProvisionAPIDTO.ssoInstanceIssuers(this.ssoInstanceIssuers);
            return tenantProvisionAPIDTO;
        }

        /**
         * Execute addTenant request
         * @return TenantProvisionAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantProvisionAPIDTO execute() throws ApiException {
            TenantProvisionAPIDTO tenantProvisionAPIDTO = buildBodyParams();
            ApiResponse<TenantProvisionAPIDTO> localVarResp = addTenantWithHttpInfo(tenantProvisionAPIDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantProvisionAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantProvisionAPIDTO> executeWithHttpInfo() throws ApiException {
            TenantProvisionAPIDTO tenantProvisionAPIDTO = buildBodyParams();
            return addTenantWithHttpInfo(tenantProvisionAPIDTO);
        }

        /**
         * Execute addTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantProvisionAPIDTO> _callback) throws ApiException {
            TenantProvisionAPIDTO tenantProvisionAPIDTO = buildBodyParams();
            return addTenantAsync(tenantProvisionAPIDTO, _callback);
        }
    }

    /**
     * Add an analytic tenant
     * Prior to processing and loading an analytic tenant&#39;s data files, you must provision, or create, that tenant.  A provisioned analytic tenant is automatically enabled. If the tenant&#39;s data is loaded after provisioning, that  data is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the applications assigned to the tenant. Visier  organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.
     * @param tenantProvisionAPIDTO  (required)
     * @return AddTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AddTenantRequestBuilder addTenant() throws IllegalArgumentException {
        return new AddTenantRequestBuilder();
    }
    private okhttp3.Call deleteTenantCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/tenants/:tenantId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTenantValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        return deleteTenantCall(tenantId, _callback);

    }


    private ApiResponse<TenantStatusAPIDTO> deleteTenantWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = deleteTenantValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<TenantStatusAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTenantAsync(String tenantId, final ApiCallback<TenantStatusAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTenantValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<TenantStatusAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTenantRequestBuilder {
        private String tenantId;

        private DeleteTenantRequestBuilder() {
        }

        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code. (optional)
         * @return DeleteTenantRequestBuilder
         */
        public DeleteTenantRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for deleteTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTenantCall(tenantId, _callback);
        }


        /**
         * Execute deleteTenant request
         * @return TenantStatusAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantStatusAPIDTO execute() throws ApiException {
            ApiResponse<TenantStatusAPIDTO> localVarResp = deleteTenantWithHttpInfo(tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantStatusAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantStatusAPIDTO> executeWithHttpInfo() throws ApiException {
            return deleteTenantWithHttpInfo(tenantId);
        }

        /**
         * Execute deleteTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantStatusAPIDTO> _callback) throws ApiException {
            return deleteTenantAsync(tenantId, _callback);
        }
    }

    /**
     * Deprovision an analytic tenant
     * Warning! Deprovisioning an analytic tenant is not reversible.  Before deprovisioning, you must disable an analytic tenant. For more information, see **&#x60;/v1/admin/tenants/:tenantId/disable&#x60;**.   This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant  may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.   If successful, the response returns the status \&quot;Deprovisioned\&quot;. This indicates that the tenant is scheduled for  deprovisioning, which may take several days to complete.
     * @return DeleteTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTenantRequestBuilder deleteTenant() throws IllegalArgumentException {
        return new DeleteTenantRequestBuilder();
    }
    private okhttp3.Call disableTenantCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/tenants/:tenantId/disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableTenantValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        return disableTenantCall(tenantId, _callback);

    }


    private ApiResponse<TenantStatusAPIDTO> disableTenantWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = disableTenantValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<TenantStatusAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableTenantAsync(String tenantId, final ApiCallback<TenantStatusAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableTenantValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<TenantStatusAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DisableTenantRequestBuilder {
        private String tenantId;

        private DisableTenantRequestBuilder() {
        }

        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code. (optional)
         * @return DisableTenantRequestBuilder
         */
        public DisableTenantRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for disableTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disableTenantCall(tenantId, _callback);
        }


        /**
         * Execute disableTenant request
         * @return TenantStatusAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantStatusAPIDTO execute() throws ApiException {
            ApiResponse<TenantStatusAPIDTO> localVarResp = disableTenantWithHttpInfo(tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute disableTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantStatusAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantStatusAPIDTO> executeWithHttpInfo() throws ApiException {
            return disableTenantWithHttpInfo(tenantId);
        }

        /**
         * Execute disableTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantStatusAPIDTO> _callback) throws ApiException {
            return disableTenantAsync(tenantId, _callback);
        }
    }

    /**
     * Disable an analytic tenant
     * Use this API to disable an analytic tenant and remove access to Visier visualizations for the tenant&#39;s users.   You must disable an analytic tenant before deprovisioning, or removing, it from the system.
     * @return DisableTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DisableTenantRequestBuilder disableTenant() throws IllegalArgumentException {
        return new DisableTenantRequestBuilder();
    }
    private okhttp3.Call enableTenantCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/tenants/:tenantId/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableTenantValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        return enableTenantCall(tenantId, _callback);

    }


    private ApiResponse<TenantStatusAPIDTO> enableTenantWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = enableTenantValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<TenantStatusAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableTenantAsync(String tenantId, final ApiCallback<TenantStatusAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableTenantValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<TenantStatusAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnableTenantRequestBuilder {
        private String tenantId;

        private EnableTenantRequestBuilder() {
        }

        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code. (optional)
         * @return EnableTenantRequestBuilder
         */
        public EnableTenantRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for enableTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enableTenantCall(tenantId, _callback);
        }


        /**
         * Execute enableTenant request
         * @return TenantStatusAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantStatusAPIDTO execute() throws ApiException {
            ApiResponse<TenantStatusAPIDTO> localVarResp = enableTenantWithHttpInfo(tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enableTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantStatusAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantStatusAPIDTO> executeWithHttpInfo() throws ApiException {
            return enableTenantWithHttpInfo(tenantId);
        }

        /**
         * Execute enableTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantStatusAPIDTO> _callback) throws ApiException {
            return enableTenantAsync(tenantId, _callback);
        }
    }

    /**
     * Enable an analytic tenant
     * An analytic tenant is enabled when you provision or create the tenant.   Use this API to enable a tenant that you have specifically disabled; for example, if you previously did not  want that tenant to have access to Visier visualizations, but now do.
     * @return EnableTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public EnableTenantRequestBuilder enableTenant() throws IllegalArgumentException {
        return new EnableTenantRequestBuilder();
    }
    private okhttp3.Call getTenantCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/tenants/:tenantId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTenantValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        return getTenantCall(tenantId, _callback);

    }


    private ApiResponse<TenantDetailAPIDTO> getTenantWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = getTenantValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<TenantDetailAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTenantAsync(String tenantId, final ApiCallback<TenantDetailAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTenantValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<TenantDetailAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTenantRequestBuilder {
        private String tenantId;

        private GetTenantRequestBuilder() {
        }

        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code. (optional)
         * @return GetTenantRequestBuilder
         */
        public GetTenantRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for getTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTenantCall(tenantId, _callback);
        }


        /**
         * Execute getTenant request
         * @return TenantDetailAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantDetailAPIDTO execute() throws ApiException {
            ApiResponse<TenantDetailAPIDTO> localVarResp = getTenantWithHttpInfo(tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantDetailAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantDetailAPIDTO> executeWithHttpInfo() throws ApiException {
            return getTenantWithHttpInfo(tenantId);
        }

        /**
         * Execute getTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantDetailAPIDTO> _callback) throws ApiException {
            return getTenantAsync(tenantId, _callback);
        }
    }

    /**
     * Retrieve an analytic tenant&#39;s details
     * Use this API to retrieve all details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
     * @return GetTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetTenantRequestBuilder getTenant() throws IllegalArgumentException {
        return new GetTenantRequestBuilder();
    }
    private okhttp3.Call getTenantsCall(Integer limit, Integer start, Boolean details, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTenantsValidateBeforeCall(Integer limit, Integer start, Boolean details, final ApiCallback _callback) throws ApiException {
        return getTenantsCall(limit, start, details, _callback);

    }


    private ApiResponse<AllTenantsStatusAPIDTO> getTenantsWithHttpInfo(Integer limit, Integer start, Boolean details) throws ApiException {
        okhttp3.Call localVarCall = getTenantsValidateBeforeCall(limit, start, details, null);
        Type localVarReturnType = new TypeToken<AllTenantsStatusAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTenantsAsync(Integer limit, Integer start, Boolean details, final ApiCallback<AllTenantsStatusAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTenantsValidateBeforeCall(limit, start, details, _callback);
        Type localVarReturnType = new TypeToken<AllTenantsStatusAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTenantsRequestBuilder {
        private Integer limit;
        private Integer start;
        private Boolean details;

        private GetTenantsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The limit of analytic tenant details to retrieve. (optional)
         * @return GetTenantsRequestBuilder
         */
        public GetTenantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return GetTenantsRequestBuilder
         */
        public GetTenantsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set details
         * @param details If true, the response returns information about the data version and modules. (optional)
         * @return GetTenantsRequestBuilder
         */
        public GetTenantsRequestBuilder details(Boolean details) {
            this.details = details;
            return this;
        }
        
        /**
         * Build call for getTenants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTenantsCall(limit, start, details, _callback);
        }


        /**
         * Execute getTenants request
         * @return AllTenantsStatusAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AllTenantsStatusAPIDTO execute() throws ApiException {
            ApiResponse<AllTenantsStatusAPIDTO> localVarResp = getTenantsWithHttpInfo(limit, start, details);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTenants request with HTTP info returned
         * @return ApiResponse&lt;AllTenantsStatusAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AllTenantsStatusAPIDTO> executeWithHttpInfo() throws ApiException {
            return getTenantsWithHttpInfo(limit, start, details);
        }

        /**
         * Execute getTenants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AllTenantsStatusAPIDTO> _callback) throws ApiException {
            return getTenantsAsync(limit, start, details, _callback);
        }
    }

    /**
     * Retrieve a list of all analytic tenants
     * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the  content modules assigned to them, and all other relevant details for the tenants if requested.
     * @return GetTenantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetTenantsRequestBuilder getTenants() throws IllegalArgumentException {
        return new GetTenantsRequestBuilder();
    }
    private okhttp3.Call updateTenantCall(UpdateTenantModel updateTenantModel, String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTenantModel;

        // create path and map variables
        String localVarPath = "/v1/admin/tenants/:tenantId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTenantValidateBeforeCall(UpdateTenantModel updateTenantModel, String tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateTenantModel' is set
        if (updateTenantModel == null) {
            throw new ApiException("Missing the required parameter 'updateTenantModel' when calling updateTenant(Async)");
        }

        return updateTenantCall(updateTenantModel, tenantId, _callback);

    }


    private ApiResponse<TenantProvisionAPIDTO> updateTenantWithHttpInfo(UpdateTenantModel updateTenantModel, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = updateTenantValidateBeforeCall(updateTenantModel, tenantId, null);
        Type localVarReturnType = new TypeToken<TenantProvisionAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTenantAsync(UpdateTenantModel updateTenantModel, String tenantId, final ApiCallback<TenantProvisionAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTenantValidateBeforeCall(updateTenantModel, tenantId, _callback);
        Type localVarReturnType = new TypeToken<TenantProvisionAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTenantRequestBuilder {
        private String tenantDisplayName;
        private Integer industryCode;
        private List<String> purchasedModules;
        private List<String> embeddableDomains;
        private Map<String, String> customProperties;
        private List<String> ssoInstanceIssuers;
        private String tenantId;

        private UpdateTenantRequestBuilder() {
        }

        /**
         * Set tenantDisplayName
         * @param tenantDisplayName A display name that is assigned to the new analytic tenant. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder tenantDisplayName(String tenantDisplayName) {
            this.tenantDisplayName = tenantDisplayName;
            return this;
        }
        
        /**
         * Set industryCode
         * @param industryCode The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 000000.   For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder industryCode(Integer industryCode) {
            this.industryCode = industryCode;
            return this;
        }
        
        /**
         * Set purchasedModules
         * @param purchasedModules A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder purchasedModules(List<String> purchasedModules) {
            this.purchasedModules = purchasedModules;
            return this;
        }
        
        /**
         * Set embeddableDomains
         * @param embeddableDomains A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If  domains at the administrating tenant level match the domains at the analytic tenant level, you do not need  to include a domain for each analytic tenant. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder embeddableDomains(List<String> embeddableDomains) {
            this.embeddableDomains = embeddableDomains;
            return this;
        }
        
        /**
         * Set customProperties
         * @param customProperties A set of key-value pairs that represent different customizable properties for the analytic tenant. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder customProperties(Map<String, String> customProperties) {
            this.customProperties = customProperties;
            return this;
        }
        
        /**
         * Set ssoInstanceIssuers
         * @param ssoInstanceIssuers A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder ssoInstanceIssuers(List<String> ssoInstanceIssuers) {
            this.ssoInstanceIssuers = ssoInstanceIssuers;
            return this;
        }
        
        /**
         * Set tenantId
         * @param tenantId The ID of the tenant to update. (optional)
         * @return UpdateTenantRequestBuilder
         */
        public UpdateTenantRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for updateTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTenantModel updateTenantModel = buildBodyParams();
            return updateTenantCall(updateTenantModel, tenantId, _callback);
        }

        private UpdateTenantModel buildBodyParams() {
            UpdateTenantModel updateTenantModel = new UpdateTenantModel();
            updateTenantModel.tenantDisplayName(this.tenantDisplayName);
            updateTenantModel.industryCode(this.industryCode);
            updateTenantModel.purchasedModules(this.purchasedModules);
            updateTenantModel.embeddableDomains(this.embeddableDomains);
            updateTenantModel.customProperties(this.customProperties);
            updateTenantModel.ssoInstanceIssuers(this.ssoInstanceIssuers);
            return updateTenantModel;
        }

        /**
         * Execute updateTenant request
         * @return TenantProvisionAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantProvisionAPIDTO execute() throws ApiException {
            UpdateTenantModel updateTenantModel = buildBodyParams();
            ApiResponse<TenantProvisionAPIDTO> localVarResp = updateTenantWithHttpInfo(updateTenantModel, tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantProvisionAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantProvisionAPIDTO> executeWithHttpInfo() throws ApiException {
            UpdateTenantModel updateTenantModel = buildBodyParams();
            return updateTenantWithHttpInfo(updateTenantModel, tenantId);
        }

        /**
         * Execute updateTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantProvisionAPIDTO> _callback) throws ApiException {
            UpdateTenantModel updateTenantModel = buildBodyParams();
            return updateTenantAsync(updateTenantModel, tenantId, _callback);
        }
    }

    /**
     * Update an analytic tenant
     * You may need to update analytic tenants as they grow and as your organization upgrades the content available to  them. You may also encounter a scenario where an analytic tenant transitions across different industries.   To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their  industry code in the Visier system.   You can use this API to update any field on an analytic tenant, except tenantCode.
     * @param updateTenantModel  (required)
     * @return UpdateTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTenantRequestBuilder updateTenant() throws IllegalArgumentException {
        return new UpdateTenantRequestBuilder();
    }
    private okhttp3.Call validateTenantCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/validation/tenants/:tenantId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantId", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTenantValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        return validateTenantCall(tenantId, _callback);

    }


    private ApiResponse<TenantPreviewEntriesSummaryDTO> validateTenantWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = validateTenantValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<TenantPreviewEntriesSummaryDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateTenantAsync(String tenantId, final ApiCallback<TenantPreviewEntriesSummaryDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTenantValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<TenantPreviewEntriesSummaryDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateTenantRequestBuilder {
        private String tenantId;

        private ValidateTenantRequestBuilder() {
        }

        /**
         * Set tenantId
         * @param tenantId The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code. (optional)
         * @return ValidateTenantRequestBuilder
         */
        public ValidateTenantRequestBuilder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        
        /**
         * Build call for validateTenant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateTenantCall(tenantId, _callback);
        }


        /**
         * Execute validateTenant request
         * @return TenantPreviewEntriesSummaryDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantPreviewEntriesSummaryDTO execute() throws ApiException {
            ApiResponse<TenantPreviewEntriesSummaryDTO> localVarResp = validateTenantWithHttpInfo(tenantId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateTenant request with HTTP info returned
         * @return ApiResponse&lt;TenantPreviewEntriesSummaryDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantPreviewEntriesSummaryDTO> executeWithHttpInfo() throws ApiException {
            return validateTenantWithHttpInfo(tenantId);
        }

        /**
         * Execute validateTenant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantPreviewEntriesSummaryDTO> _callback) throws ApiException {
            return validateTenantAsync(tenantId, _callback);
        }
    }

    /**
     * Validate an analytic tenant&#39;s metric values
     * Use this API to retrieve the metric values for an individual analytic tenant. The metric values included in the  response are the tenant&#39;s configured summary metrics. Administrators can configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
     * @return ValidateTenantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTenantRequestBuilder validateTenant() throws IllegalArgumentException {
        return new ValidateTenantRequestBuilder();
    }
    private okhttp3.Call validateTenantsCall(Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/validation/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTenantsValidateBeforeCall(Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        return validateTenantsCall(limit, start, _callback);

    }


    private ApiResponse<TenantPreviewEntriesSummaryListDTO> validateTenantsWithHttpInfo(Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = validateTenantsValidateBeforeCall(limit, start, null);
        Type localVarReturnType = new TypeToken<TenantPreviewEntriesSummaryListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateTenantsAsync(Integer limit, Integer start, final ApiCallback<TenantPreviewEntriesSummaryListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTenantsValidateBeforeCall(limit, start, _callback);
        Type localVarReturnType = new TypeToken<TenantPreviewEntriesSummaryListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateTenantsRequestBuilder {
        private Integer limit;
        private Integer start;

        private ValidateTenantsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The limit of analytic tenant details to retrieve. (optional)
         * @return ValidateTenantsRequestBuilder
         */
        public ValidateTenantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return ValidateTenantsRequestBuilder
         */
        public ValidateTenantsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for validateTenants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateTenantsCall(limit, start, _callback);
        }


        /**
         * Execute validateTenants request
         * @return TenantPreviewEntriesSummaryListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantPreviewEntriesSummaryListDTO execute() throws ApiException {
            ApiResponse<TenantPreviewEntriesSummaryListDTO> localVarResp = validateTenantsWithHttpInfo(limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateTenants request with HTTP info returned
         * @return ApiResponse&lt;TenantPreviewEntriesSummaryListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantPreviewEntriesSummaryListDTO> executeWithHttpInfo() throws ApiException {
            return validateTenantsWithHttpInfo(limit, start);
        }

        /**
         * Execute validateTenants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantPreviewEntriesSummaryListDTO> _callback) throws ApiException {
            return validateTenantsAsync(limit, start, _callback);
        }
    }

    /**
     * Validate metric values for all analytic tenants
     * As you onboard more analytic tenants, you can validate the data visible to your users to ensure it matches the  source systems from which it was exported and that it matches what your expectations are for this data.   The metric values included in the response are the tenant&#39;s configured summary metrics. Administrators can  configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
     * @return ValidateTenantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTenantsRequestBuilder validateTenants() throws IllegalArgumentException {
        return new ValidateTenantsRequestBuilder();
    }
}
